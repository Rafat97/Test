/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package xboxcontroller;

import com.github.sarxos.webcam.Webcam;
import com.github.sarxos.webcam.WebcamDiscoveryEvent;
import com.github.sarxos.webcam.WebcamDiscoveryListener;
import com.github.sarxos.webcam.WebcamEvent;
import com.github.sarxos.webcam.WebcamListener;
import com.github.sarxos.webcam.WebcamPanel;
import com.github.sarxos.webcam.WebcamResolution;
import java.awt.AWTEventMulticaster;

import java.awt.Dimension;
import java.awt.GridBagLayout;
import java.awt.GridLayout;
import java.awt.Image;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.ComponentAdapter;
import java.awt.event.ComponentListener;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.net.DatagramSocket;
import java.net.InetAddress;
import java.net.SocketException;
import java.net.UnknownHostException;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JSeparator;
import javax.swing.SwingConstants;
import javax.swing.SwingUtilities;

/**
 *
 * @author Root10
 */
public class VideoFeedBack extends javax.swing.JFrame implements WebcamDiscoveryListener {

    /**
     * Creates new form VideoFeedBack
     */
    Webcam webcam;
    WebcamPanel wep;
    List<Webcam> nlistWebcam;

    public VideoFeedBack() {
        Webcam.addDiscoveryListener(this);
        initComponents();

        
        
        setLocationRelativeTo(null);
        nlistWebcam = Webcam.getWebcams();
        for (Webcam model : nlistWebcam) {
            JSeparator jsp = new JSeparator();
            jsp.setOrientation(SwingConstants.VERTICAL);

            Dimension d = new Dimension(7, 7);
            JButton btn = new JButton(model.toString());

            btn.setPreferredSize(d);
            btn.setSize(200, 50);
            Webcam modeWebcamFinal = model;
            btn.addActionListener(new ActionListener() {
                @Override
                public void actionPerformed(ActionEvent e) {
                    CreateWebCamView(modeWebcamFinal);
                }
            });

            JButton btn2 = new JButton("tset");
            btn2.setPreferredSize(d);
            btn2.setSize(200, 50);

            JButton btn3 = new JButton("tset");
            btn3.setPreferredSize(d);
            btn3.setSize(200, 50);

            jPanel1.add(btn);

            jPanel1.revalidate();
            jPanel1.repaint();

        }

        jPanel1.setLayout(new GridLayout(1, 0));
        jPanel1.setSize(100, 100);

//        webcam = Webcam.getDefault();
//         webcam.setViewSize(WebcamResolution.VGA.getSize());
////        webcam.open();
//         wep = new WebcamPanel(webcam);
//        wep.setImageSizeDisplayed(true);
//        wep.setFPSDisplayed(true);
//        wep.setMirrored(true);
//        wep.setDisplayDebugInfo(true);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        RoverController = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));

        jLabel1.setFont(new java.awt.Font("Berlin Sans FB Demi", 0, 24)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("AUST MARS ROVER");

        jButton1.setText("Camera All");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        RoverController.setText("Rover Controller");
        RoverController.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RoverControllerActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(RoverController, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 201, Short.MAX_VALUE)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(59, 59, 59)
                .addComponent(RoverController, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(303, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 926, Short.MAX_VALUE)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 62, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, 55, Short.MAX_VALUE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here
//        Image img = webcam.getImage();
//        jLabel1.setIcon(new ImageIcon(img));
        //new VideoFeed().start();
        //jLabel1.add(wep);
        SwingUtilities.invokeLater(new WebcamViewerExample(0));

        //System.exit(0);
//        for (Webcam model : nlistWebcam) {
//            System.out.println(model.toString());
//
//            Webcam webcam_new = model;
//           
//            
//            CreateWebCamView(webcam_new);
////
////            Dimension[] nonStandardResolutions = new Dimension[]{
////                WebcamResolution.VGA.getSize(),
////                WebcamResolution.SVGA.getSize(),
////                WebcamResolution.SXGA.getSize(),
////                WebcamResolution.PAL.getSize(),
////                WebcamResolution.HD720.getSize(),
////                new Dimension(2000, 1000),
////                new Dimension(1000, 500),};
////
////            webcam_new.setCustomViewSizes(nonStandardResolutions);
////            webcam_new.setViewSize(WebcamResolution.SVGA.getSize());
////            WebcamPanel wep = new WebcamPanel(webcam_new);
////            wep.setImageSizeDisplayed(true);
////            wep.setFPSDisplayed(true);
////            wep.setMirrored(true);
////            wep.setDisplayDebugInfo(true);
////
////            JFrame jf = new JFrame();
////            jf.add(wep);
////            jf.pack();
////            jf.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
////            jf.setVisible(true);
//        }

    }//GEN-LAST:event_jButton1ActionPerformed

    private void RoverControllerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RoverControllerActionPerformed
        // TODO add your handling code here:
        new RoverController().setVisible(true);
    }//GEN-LAST:event_RoverControllerActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(VideoFeedBack.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(VideoFeedBack.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(VideoFeedBack.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(VideoFeedBack.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        try {
            getIp();
        } catch (Exception e) {
        }

        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new VideoFeedBack().setVisible(true);
            }
        });
    }

    public static void getIp() throws SocketException, UnknownHostException {
        try (final DatagramSocket socket = new DatagramSocket()) {
            socket.connect(InetAddress.getByName("8.8.8.8"), 10002);
            System.out.println(socket.getLocalAddress().getHostAddress());
        }
    }

    @Override
    public void webcamFound(WebcamDiscoveryEvent wde) {
        System.out.println(wde.getWebcam().getName());
    }

    @Override
    public void webcamGone(WebcamDiscoveryEvent wde) {
        System.out.println(wde.getWebcam().getName());
    }

    class VideoFeed extends Thread {

        Webcam webcam;

        public VideoFeed(Webcam webcam) {
            this.webcam = webcam;
        }

        @Override
        public void run() {
            while (true) {
                Image img = this.webcam.getImage();
                jLabel1.setIcon(new ImageIcon(img));
                try {
                    Thread.sleep(20);
                } catch (InterruptedException ex) {
                    Logger.getLogger(VideoFeedBack.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }

    }

    public void CreateWebCamView(Webcam modeWebcamFinal) {

        try {
            Webcam webcam_new = modeWebcamFinal;
            Dimension[] nonStandardResolutions = new Dimension[]{
                WebcamResolution.VGA.getSize(),
                WebcamResolution.SVGA.getSize(),
                WebcamResolution.SXGA.getSize(),
                WebcamResolution.PAL.getSize(),
                WebcamResolution.HD720.getSize(),
                new Dimension(2000, 1000),
                new Dimension(1000, 500),};

            WebcamDiscoveryListener WebcamDiscoveryListener = new WebcamDiscoveryListener() {
                @Override
                public void webcamFound(WebcamDiscoveryEvent wde) {
                    System.out.println("WebcamDiscoveryListener webcamFound");
                }

                @Override
                public void webcamGone(WebcamDiscoveryEvent wde) {
                    System.out.println("WebcamDiscoveryListener webcamGone");
                }
            };

            webcam_new.addDiscoveryListener(WebcamDiscoveryListener);

            webcam_new.addWebcamListener(new WebcamListener() {
                @Override
                public void webcamOpen(WebcamEvent we) {
                    //System.out.println("WebcamListener webcamOpen");
                }

                @Override
                public void webcamClosed(WebcamEvent we) {
                    //System.out.println("WebcamListener webcamClosed");
                }

                @Override
                public void webcamDisposed(WebcamEvent we) {
                    //System.out.println("WebcamListener webcamDisposed");
                }

                @Override
                public void webcamImageObtained(WebcamEvent we) {
                    //System.out.println("WebcamListener webcamImageObtained");
                }

            });
            //webcam_new.setCustomViewSizes(nonStandardResolutions);
            webcam_new.setViewSize(WebcamResolution.VGA.getSize());
            WebcamPanel wep = new WebcamPanel(webcam_new);
            wep.setImageSizeDisplayed(true);
            wep.setFPSDisplayed(true);
            wep.setFillArea(true);
            wep.setMirrored(true);
            wep.setDisplayDebugInfo(true);

            Thread th = new Thread(new Runnable() {
                @Override
                public void run() {
                    JFrame jf = new JFrame();
                    jf.add(wep);
                    jf.pack();
                    jf.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
                    jf.setVisible(true);
                    
                    
                    
                    
            jf.addWindowListener(new WindowListener() {
                @Override
                public void windowOpened(WindowEvent e) {
                    System.out.println("JFrame windowOpened");
                }

                @Override
                public void windowClosing(WindowEvent e) {
                    System.out.println("JFrame windowClosing");
                    webcam_new.close();
                }

                @Override
                public void windowClosed(WindowEvent e) {
                    System.out.println("JFrame windowClosed");
                    webcam_new.close();
                }

                @Override
                public void windowIconified(WindowEvent e) {
                    System.out.println("JFrame windowIconified");
                }

                @Override
                public void windowDeiconified(WindowEvent e) {
                    System.out.println("JFrame windowDeiconified");

                }

                @Override
                public void windowActivated(WindowEvent e) {
                    System.out.println("JFrame windowActivated");

                }

                @Override
                public void windowDeactivated(WindowEvent e) {
                    System.out.println("JFrame windowDeactivated");

                }
            });
                    
                }
            });
            th.start();

        } catch (Exception e) {
            JOptionPane.showMessageDialog(this,
                    e.getMessage(),
                    "WARNING! " + e,
                    JOptionPane.ERROR_MESSAGE);

        }

    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton RoverController;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    // End of variables declaration//GEN-END:variables
}
